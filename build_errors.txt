   Compiling neura_qbft_core v0.1.0 (/home/peastew/src/neura-reth/crates/neura-qbft)
warning: unused import: `QbftPayload`
 --> crates/neura-qbft/src/statemachine/round_state.rs:2:22
  |
2 | use crate::payload::{QbftPayload, PreparePayload, CommitPayload};
  |                      ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Decodable`
 --> crates/neura-qbft/src/messagewrappers/round_change.rs:5:56
  |
5 | use alloy_rlp::{RlpEncodable, RlpDecodable, Encodable, Decodable}; // Correct RLP imports
  |                                                        ^^^^^^^^^

warning: unused import: `crate::payload::QbftPayload`
 --> crates/neura-qbft/src/validation/proposal_validator.rs:5:5
  |
5 | use crate::payload::QbftPayload;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::payload::QbftPayload`
 --> crates/neura-qbft/src/validation/round_change_message_validator.rs:4:5
  |
4 | use crate::payload::QbftPayload;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Encodable`
 --> crates/neura-qbft/src/messagewrappers/round_change.rs:5:45
  |
5 | use alloy_rlp::{RlpEncodable, RlpDecodable, Encodable, Decodable}; // Correct RLP imports
  |                                             ^^^^^^^^^

warning: unused import: `Decodable`
 --> crates/neura-qbft/src/payload/commit_payload.rs:5:56
  |
5 | use alloy_rlp::{RlpEncodable, RlpDecodable, Encodable, Decodable};
  |                                                        ^^^^^^^^^

warning: unused import: `Encodable`
 --> crates/neura-qbft/src/payload/commit_payload.rs:5:45
  |
5 | use alloy_rlp::{RlpEncodable, RlpDecodable, Encodable, Decodable};
  |                                             ^^^^^^^^^

warning: unused import: `sha3::Digest`
  --> crates/neura-qbft/src/types/signed_data.rs:13:5
   |
13 | use sha3::Digest; // For hashing the payload before signing
   |     ^^^^^^^^^^^^

warning: unused import: `Decodable`
 --> crates/neura-qbft/src/messagewrappers/prepared_certificate.rs:5:17
  |
5 | use alloy_rlp::{Decodable, Encodable, RlpDecodable, RlpEncodable};
  |                 ^^^^^^^^^

warning: unused import: `Encodable`
 --> crates/neura-qbft/src/messagewrappers/prepared_certificate.rs:5:28
  |
5 | use alloy_rlp::{Decodable, Encodable, RlpDecodable, RlpEncodable};
  |                            ^^^^^^^^^

warning: unused variable: `block`
   --> crates/neura-qbft/src/statemachine/qbft_round.rs:174:32
    |
174 |     fn send_prepare(&mut self, block: QbftBlock, block_digest: Hash) -> Result<(), QbftError> {
    |                                ^^^^^ help: if this is intentional, prefix it with an underscore: `_block`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `current_time_seconds`
   --> crates/neura-qbft/src/statemachine/qbft_block_height_manager.rs:136:17
    |
136 |             let current_time_seconds = std::time::SystemTime::now()
    |                 ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_time_seconds`

warning: unused variable: `proposer_address`
   --> crates/neura-qbft/src/statemachine/qbft_controller.rs:181:13
    |
181 |         let proposer_address = validators[proposer_index]; // This is for MessageValidator config if it needs initial proposer
    |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_proposer_address`

warning: fields `final_state`, `locked_block`, `proposal_sent`, `prepare_sent`, and `finalized_block_hash_in_round` are never read
  --> crates/neura-qbft/src/statemachine/qbft_round.rs:29:5
   |
26 | pub struct QbftRound {
   |            --------- fields in this struct
...
29 |     final_state: Arc<dyn QbftFinalState>,
   |     ^^^^^^^^^^^
...
37 |     locked_block: Option<QbftBlock>,
   |     ^^^^^^^^^^^^
38 |     proposal_sent: bool,
   |     ^^^^^^^^^^^^^
39 |     prepare_sent: bool,
   |     ^^^^^^^^^^^^
40 |     finalized_block_hash_in_round: Option<Hash>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: methods `get_block_to_propose`, `send_proposal_if_new_block_available`, `send_prepare_if_proposal_accepted`, and `add_prepare_if_valid` are never used
   --> crates/neura-qbft/src/statemachine/qbft_round.rs:361:8
    |
43  | impl QbftRound {
    | -------------- methods in this implementation
...
361 |     fn get_block_to_propose(&mut self, target_round_identifier: ConsensusRoundIdentifier) -> Result<QbftBlock, QbftError> {
    |        ^^^^^^^^^^^^^^^^^^^^
...
372 |     fn send_proposal_if_new_block_available(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
408 |     fn send_prepare_if_proposal_accepted(&mut self) -> Result<(), QbftError> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
430 |     fn add_prepare_if_valid(&mut self, prepare: Prepare) -> Result<bool, QbftError> {
    |        ^^^^^^^^^^^^^^^^^^^^

warning: fields `round_change_message_validator`, `locked_block`, `finalized_block`, and `round_timeout_count` are never read
  --> crates/neura-qbft/src/statemachine/qbft_block_height_manager.rs:32:5
   |
20 | pub struct QbftBlockHeightManager {
   |            ---------------------- fields in this struct
...
32 |     round_change_message_validator: RoundChangeMessageValidator, // Configured
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
38 |     locked_block: Option<QbftBlock>,
   |     ^^^^^^^^^^^^
39 |     finalized_block: Option<QbftBlock>,
   |     ^^^^^^^^^^^^^^^
40 |     round_timeout_count: u32
   |     ^^^^^^^^^^^^^^^^^^^

warning: methods `on_block_finalized` and `process_round_state_change` are never used
   --> crates/neura-qbft/src/statemachine/qbft_block_height_manager.rs:434:8
    |
43  | impl QbftBlockHeightManager {
    | --------------------------- methods in this implementation
...
434 |     fn on_block_finalized(&self, block: &QbftBlock) {
    |        ^^^^^^^^^^^^^^^^^^
...
440 |     fn process_round_state_change(&mut self, round_number: u32, block: QbftBlock) -> Result<(), QbftError> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method `create_height_manager` is never used
   --> crates/neura-qbft/src/statemachine/qbft_controller.rs:172:8
    |
33  | impl QbftController {
    | ------------------- method in this implementation
...
172 |     fn create_height_manager(&self, parent_header: &QbftBlockHeader) -> Result<QbftBlockHeightManager, QbftError> {
    |        ^^^^^^^^^^^^^^^^^^^^^

warning: using `.clone()` on a double reference, which returns `&QbftBlock` instead of cloning the inner type
  --> crates/neura-qbft/src/statemachine/round_change_manager.rs:48:34
   |
48 | ...                   block.clone().clone(),
   |                            ^^^^^^^^
   |
   = note: `#[warn(suspicious_double_ref_op)]` on by default

warning: function `MOCK_ROUND_IDENTIFIER` should have a snake case name
  --> crates/neura-qbft/src/payload/commit_payload.rs:42:8
   |
42 |     fn MOCK_ROUND_IDENTIFIER() -> ConsensusRoundIdentifier {
   |        ^^^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `mock_round_identifier`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: function `MOCK_DIGEST` should have a snake case name
  --> crates/neura-qbft/src/payload/commit_payload.rs:46:8
   |
46 |     fn MOCK_DIGEST() -> Hash {
   |        ^^^^^^^^^^^ help: convert the identifier to snake case: `mock_digest`

warning: function `MOCK_RLP_SIGNATURE` should have a snake case name
  --> crates/neura-qbft/src/payload/commit_payload.rs:50:8
   |
50 |     fn MOCK_RLP_SIGNATURE() -> RlpSignature {
   |        ^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `mock_rlp_signature`

warning: `neura_qbft_core` (lib) generated 19 warnings
warning: `neura_qbft_core` (lib test) generated 20 warnings (17 duplicates)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.16s
