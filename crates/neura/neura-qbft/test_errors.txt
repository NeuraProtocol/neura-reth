warning: unused import: `AccessList as AlloyAccessList`
 --> crates/neura/neura-payload-types/src/lib.rs:2:61
  |
2 | use alloy_rpc_types::eth::{Transaction as AlloyTransaction, AccessList as AlloyAccessList};
  |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unnecessary braces around function argument
  --> crates/neura/neura-payload-types/src/lib.rs:62:28
   |
62 |             y_parity: Some({ if signature.v() { U256::from(1) } else { U256::from(0) } }),
   |                            ^^                                                         ^^
   |
   = note: `#[warn(unused_braces)]` on by default
help: remove these braces
   |
62 -             y_parity: Some({ if signature.v() { U256::from(1) } else { U256::from(0) } }),
62 +             y_parity: Some(if signature.v() { U256::from(1) } else { U256::from(0) }),
   |

warning: missing documentation for the crate
   --> crates/neura/neura-payload-types/src/lib.rs:1:1
    |
1   | / use alloy_primitives::{Address, Bytes, U256, B256};
2   | | use alloy_rpc_types::eth::{Transaction as AlloyTransaction, AccessList as AlloyAccessList};
3   | | use alloy_rpc_types::TransactionTrait; // Import the trait
4   | | use reth_ethereum_engine_primitives::EthBuiltPayload;
...   |
110 | | } 
    | |_^
    |
    = note: requested on the command line with `-W missing-docs`

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:20:5
   |
20 |     pub to: Option<Address>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:21:5
   |
21 |     pub value: U256,
   |     ^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:22:5
   |
22 |     pub input: Bytes,
   |     ^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:23:5
   |
23 |     pub nonce: u64,
   |     ^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:24:5
   |
24 |     pub gas_limit: u64,
   |     ^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:25:5
   |
25 |     pub gas_price: Option<U256>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:26:5
   |
26 |     pub chain_id: Option<u64>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:27:5
   |
27 |     pub r: U256,
   |     ^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:28:5
   |
28 |     pub s: U256,
   |     ^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:29:5
   |
29 |     pub v: U256,
   |     ^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:30:5
   |
30 |     pub y_parity: Option<U256>, // Represents Parity (0 for even, 1 for odd)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:31:5
   |
31 |     pub access_list: Option<Vec<(Address, Vec<U256>)>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:32:5
   |
32 |     pub transaction_type: Option<U256>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:33:5
   |
33 |     pub max_fee_per_gas: Option<U256>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:34:5
   |
34 |     pub max_priority_fee_per_gas: Option<U256>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated type
  --> crates/neura/neura-payload-types/src/lib.rs:39:5
   |
39 |     type FullType;
   |     ^^^^^^^^^^^^^

warning: missing documentation for a method
  --> crates/neura/neura-payload-types/src/lib.rs:40:5
   |
40 |     fn into_full_type(self) -> Self::FullType;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:81:5
   |
81 |     pub original_payload: EthBuiltPayload,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a struct field
  --> crates/neura/neura-payload-types/src/lib.rs:82:5
   |
82 |     pub full_transactions: Vec<FullTransaction>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> crates/neura/neura-payload-types/src/lib.rs:86:5
   |
86 |     pub fn new(original_payload: EthBuiltPayload, full_transactions: Vec<FullTransaction>) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
  --> crates/neura/neura-payload-types/src/lib.rs:91:5
   |
91 |     pub fn full_transactions(&self) -> &[FullTransaction] {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `neura-payload-types` (lib) generated 24 warnings (run `cargo fix --lib -p neura-payload-types` to apply 2 suggestions)
   Compiling neura-payload-builder v0.1.0 (/home/peastew/src/neura-reth/crates/neura/neura-payload-builder)
error[E0432]: unresolved import `reth_basic_payload_builder::Payload`
 --> crates/neura/neura-payload-builder/src/lib.rs:6:104
  |
6 | use reth_basic_payload_builder::{BuildArguments, BuildOutcome, MissingPayloadBehaviour, PayloadConfig, Payload as BasicPayloadStruct};
  |                                                                                                        -------^^^^^^^^^^^^^^^^^^^^^^
  |                                                                                                        |
  |                                                                                                        no `Payload` in the root
  |                                                                                                        help: a similar name exists in the module: `PayloadId`
  |
  = help: consider importing one of these variants instead:
          reth_payload_primitives::EngineObjectValidationError::Payload
          reth_payload_primitives::MessageValidationKind::Payload

error[E0432]: unresolved import `alloy_primitives::Parity`
  --> crates/neura/neura-payload-builder/src/lib.rs:17:86
   |
17 | use alloy_primitives::{Signature as AlloySignature, U256, Address, Bytes, B256, U64, Parity as AlloyParity};
   |                                                                                      ^^^^^^^^^^^^^^^^^^^^^ no `Parity` in the root

error[E0432]: unresolved imports `alloy_consensus::Recovered`, `alloy_consensus::TxKind`, `alloy_consensus::AccessList`, `alloy_consensus::AccessListItem`, `alloy_consensus::SignedImmut`, `alloy_consensus::Signable`, `alloy_consensus::Encodable`
  --> crates/neura/neura-payload-builder/src/lib.rs:24:13
   |
24 |     Signed, Recovered, TxLegacy, TxEip2930, TxEip1559, TxEip4844,
   |             ^^^^^^^^^ no `Recovered` in the root
25 |     TxKind as AlloyTxKind,
   |     ^^^^^^^^^^^^^^^^^^^^^ no `TxKind` in the root
26 |     AccessList as AlloyConsensusAccessList,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `AccessList` in the root
27 |     AccessListItem as AlloyConsensusAccessListItem,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `AccessListItem` in the root
28 |     BlobTransactionSidecar as AlloyBlobTransactionSidecar,
29 |     SignedImmut,
   |     ^^^^^^^^^^^ no `SignedImmut` in the root
30 |     Signable,
   |     ^^^^^^^^ no `Signable` in the root
31 |     Encodable,
   |     ^^^^^^^^^ no `Encodable` in the root
   |
   = help: consider importing one of these structs instead:
           alloy_consensus::transaction::Recovered
           reth_primitives_traits::Recovered
   = help: consider importing this enum instead:
           alloy_primitives::TxKind
   = help: consider importing one of these structs instead:
           alloy_eips::eip2930::AccessList
           alloy_rpc_types::AccessList
   = help: consider importing one of these structs instead:
           alloy_eips::eip2930::AccessListItem
           alloy_rpc_types::AccessListItem

error[E0432]: unresolved import `alloy_primitives::kzg`
  --> crates/neura/neura-payload-builder/src/lib.rs:33:23
   |
33 | use alloy_primitives::kzg::{Blob, KzgCommitment, KzgProof};
   |                       ^^^ could not find `kzg` in `alloy_primitives`

error[E0432]: unresolved import `reth_primitives`
  --> crates/neura/neura-payload-builder/src/lib.rs:22:5
   |
22 | use reth_primitives::{Transaction as RethTransactionEnum, TxType, AccessListItem as RethAccessListItem, Parity as RethParity, Transaction...
   |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `reth_primitives`
   |
help: there is a crate or module with a similar name
   |
22 - use reth_primitives::{Transaction as RethTransactionEnum, TxType, AccessListItem as RethAccessListItem, Parity as RethParity, TransactionKind as RethTransactionKind, Signature as RethPrimitiveSignature, Header};
22 + use alloy_primitives::{Transaction as RethTransactionEnum, TxType, AccessListItem as RethAccessListItem, Parity as RethParity, TransactionKind as RethTransactionKind, Signature as RethPrimitiveSignature, Header};
   |

warning: unused imports: `BuildArguments`, `BuildOutcome`, `MissingPayloadBehaviour`, and `PayloadConfig`
 --> crates/neura/neura-payload-builder/src/lib.rs:6:34
  |
6 | use reth_basic_payload_builder::{BuildArguments, BuildOutcome, MissingPayloadBehaviour, PayloadConfig, Payload as BasicPayloadStruct};
  |                                  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `NodePrimitives` and `SealedHeader`
  --> crates/neura/neura-payload-builder/src/lib.rs:15:30
   |
15 | use reth_primitives_traits::{NodePrimitives, SealedHeader};
   |                              ^^^^^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `AccessList as AlloyAccessList` and `AccessListItem as AlloyAccessListItem`
  --> crates/neura/neura-payload-builder/src/lib.rs:16:61
   |
16 | use alloy_rpc_types::eth::{Transaction as AlloyTransaction, AccessList as AlloyAccessList, AccessListItem as AlloyAccessListItem};
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `B256`, `Bytes`, and `U64`
  --> crates/neura/neura-payload-builder/src/lib.rs:17:68
   |
17 | use alloy_primitives::{Signature as AlloySignature, U256, Address, Bytes, B256, U64, Parity as AlloyParity};
   |                                                                    ^^^^^  ^^^^  ^^^

warning: unused import: `alloy_eips::eip7685::Requests`
  --> crates/neura/neura-payload-builder/src/lib.rs:18:5
   |
18 | use alloy_eips::eip7685::Requests;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unexpected `cfg` condition value: `optimism`
   --> crates/neura/neura-payload-builder/src/lib.rs:161:27
    |
161 |                     #[cfg(feature = "optimism")]
    |                           ^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default` and `std`
    = help: consider adding `optimism` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `optimism`
   --> crates/neura/neura-payload-builder/src/lib.rs:186:31
    |
186 |                         #[cfg(feature = "optimism")]
    |                               ^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default` and `std`
    = help: consider adding `optimism` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `optimism`
   --> crates/neura/neura-payload-builder/src/lib.rs:212:27
    |
212 |                     #[cfg(feature = "optimism")]
    |                           ^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `default` and `std`
    = help: consider adding `optimism` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

error[E0782]: expected a type, found a trait
  --> crates/neura/neura-payload-builder/src/lib.rs:44:66
   |
44 |     Client: StateProviderFactory + ChainSpecProvider<ChainSpec = EthChainSpec> + Clone + Send + Sync + 'static,
   |                                                                  ^^^^^^^^^^^^
   |
help: you can add the `dyn` keyword if you want a trait object
   |
44 |     Client: StateProviderFactory + ChainSpecProvider<ChainSpec = dyn EthChainSpec> + Clone + Send + Sync + 'static,
   |                                                                  +++
help: you might have meant to write a bound here
   |
44 -     Client: StateProviderFactory + ChainSpecProvider<ChainSpec = EthChainSpec> + Clone + Send + Sync + 'static,
44 +     Client: StateProviderFactory + ChainSpecProvider<ChainSpec: EthChainSpec> + Clone + Send + Sync + 'static,
   |

error[E0782]: expected a type, found a trait
  --> crates/neura/neura-payload-builder/src/lib.rs:47:5
   |
47 |     EthChainSpec: EthereumHardforks, // Ensure EthChainSpec satisfies EthereumHardforks
   |     ^^^^^^^^^^^^
   |
help: you can add the `dyn` keyword if you want a trait object
   |
47 |     dyn EthChainSpec: EthereumHardforks, // Ensure EthChainSpec satisfies EthereumHardforks
   |     +++

error[E0277]: the trait bound `EthereumTxEnvelope<alloy_consensus::TxEip4844>: PoolTransaction` is not satisfied
   --> crates/neura/neura-payload-builder/src/lib.rs:45:27
    |
45  | ...ool: TransactionPool<Transaction = Arc<reth_transaction_pool::ValidPoolTransaction<TransactionSigned>>> + Clone + Send + Sync + 'static,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `PoolTransaction` is not implemented for `EthereumTxEnvelope<alloy_consensus::TxEip4844>`
    |
    = help: the trait `PoolTransaction` is implemented for `EthPooledTransaction`
note: required by a bound in `ValidPoolTransaction`
   --> /home/peastew/src/neura-reth/crates/transaction-pool/src/validate/mod.rs:260:36
    |
260 | pub struct ValidPoolTransaction<T: PoolTransaction> {
    |                                    ^^^^^^^^^^^^^^^ required by this bound in `ValidPoolTransaction`

error[E0782]: expected a type, found a trait
   --> crates/neura/neura-payload-builder/src/lib.rs:241:66
    |
241 |     Client: StateProviderFactory + ChainSpecProvider<ChainSpec = EthChainSpec> + Clone + Unpin + Send + Sync + 'static,
    |                                                                  ^^^^^^^^^^^^
    |
help: you can add the `dyn` keyword if you want a trait object
    |
241 |     Client: StateProviderFactory + ChainSpecProvider<ChainSpec = dyn EthChainSpec> + Clone + Unpin + Send + Sync + 'static,
    |                                                                  +++
help: you might have meant to write a bound here
    |
241 -     Client: StateProviderFactory + ChainSpecProvider<ChainSpec = EthChainSpec> + Clone + Unpin + Send + Sync + 'static,
241 +     Client: StateProviderFactory + ChainSpecProvider<ChainSpec: EthChainSpec> + Clone + Unpin + Send + Sync + 'static,
    |

error[E0782]: expected a type, found a trait
   --> crates/neura/neura-payload-builder/src/lib.rs:243:5
    |
243 |     EthChainSpec: EthereumHardforks,
    |     ^^^^^^^^^^^^
    |
help: you can add the `dyn` keyword if you want a trait object
    |
243 |     dyn EthChainSpec: EthereumHardforks,
    |     +++

error[E0277]: the trait bound `EthereumTxEnvelope<alloy_consensus::TxEip4844>: PoolTransaction` is not satisfied
   --> crates/neura/neura-payload-builder/src/lib.rs:242:27
    |
242 | ...ool: TransactionPool<Transaction = Arc<reth_transaction_pool::ValidPoolTransaction<TransactionSigned>>> + Clone + Send + Sync + 'static,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `PoolTransaction` is not implemented for `EthereumTxEnvelope<alloy_consensus::TxEip4844>`
    |
    = help: the trait `PoolTransaction` is implemented for `EthPooledTransaction`
note: required by a bound in `ValidPoolTransaction`
   --> /home/peastew/src/neura-reth/crates/transaction-pool/src/validate/mod.rs:260:36
    |
260 | pub struct ValidPoolTransaction<T: PoolTransaction> {
    |                                    ^^^^^^^^^^^^^^^ required by this bound in `ValidPoolTransaction`

error[E0609]: no field `transactions` on type `&SealedBlock<alloy_consensus::Block<EthereumTxEnvelope<alloy_consensus::TxEip4844>>>`
  --> crates/neura/neura-payload-builder/src/lib.rs:64:84
   |
64 |         let reth_transactions: Vec<Arc<TransactionSigned>> = built_payload.block().transactions.clone();
   |                                                                                    ^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `parent_hash`, `ommers_hash`, `beneficiary`, `state_root`, `transactions_root` ... and 16 others

error[E0599]: no method named `base_fee_per_gas` found for reference `&alloy_consensus::Header` in the current scope
  --> crates/neura/neura-payload-builder/src/lib.rs:65:76
   |
65 |         let base_fee_per_gas: Option<u64> = built_payload.block().header().base_fee_per_gas();
   |                                                                            ^^^^^^^^^^^^^^^^ field, not a method
   |
   = help: items from traits can only be used if the trait is in scope
help: remove the arguments
   |
65 -         let base_fee_per_gas: Option<u64> = built_payload.block().header().base_fee_per_gas();
65 +         let base_fee_per_gas: Option<u64> = built_payload.block().header().base_fee_per_gas;
   |
help: trait `BlockHeader` which provides `base_fee_per_gas` is implemented but not in scope; perhaps you want to import it
   |
1  + use alloy_consensus::BlockHeader;
   |

error[E0599]: no function or associated item named `from_rs_and_parity` found for struct `alloy_primitives::Signature` in the current scope
   --> crates/neura/neura-payload-builder/src/lib.rs:75:62
    |
75  |                 let alloy_signature_result = AlloySignature::from_rs_and_parity(
    |                                                              ^^^^^^^^^^^^^^^^^^ function or associated item not found in `Signature`
    |
note: if you're trying to build a new `alloy_primitives::Signature` consider using one of the following associated functions:
      alloy_primitives::Signature::decode_rlp_vrs
      alloy_primitives::Signature::new
      alloy_primitives::Signature::from_raw
      alloy_primitives::Signature::from_raw_array
      and 5 others
   --> /home/peastew/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-primitives-1.1.0/src/signature/sig.rs:98:5
    |
98  | /     pub fn decode_rlp_vrs(
99  | |         buf: &mut &[u8],
100 | |         decode_parity: impl FnOnce(&mut &[u8]) -> alloy_rlp::Result<bool>,
101 | |     ) -> Result<Self, alloy_rlp::Error> {
    | |_______________________________________^
...
115 |       pub const fn new(r: U256, s: U256, y_parity: bool) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
124 |       pub fn from_raw(bytes: &[u8]) -> Result<Self, SignatureError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
134 |       pub fn from_raw_array(bytes: &[u8; 65]) -> Result<Self, SignatureError> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `from_scalars_and_parity` with a similar name
    |
75  -                 let alloy_signature_result = AlloySignature::from_rs_and_parity(
75  +                 let alloy_signature_result = AlloySignature::from_scalars_and_parity(
    |

error[E0308]: mismatched types
   --> crates/neura/neura-payload-builder/src/lib.rs:110:83
    |
110 |                       RethTransactionEnum::Legacy(tx) => EthereumTxEnvelope::Legacy(TxLegacy {
    |  ________________________________________________________--------------------------_^
    | |                                                        |
    | |                                                        arguments to this enum variant are incorrect
111 | |                         nonce: tx.nonce,
112 | |                         gas_price: tx.gas_price,
113 | |                         gas_limit: tx.gas_limit,
...   |
117 | |                         chain_id: Some(tx.chain_id),
118 | |                     }),
    | |_____________________^ expected `Signed<TxLegacy>`, found `TxLegacy`
    |
    = note: expected struct `alloy_consensus::Signed<TxLegacy>`
               found struct `TxLegacy`
note: tuple variant defined here
   --> /home/peastew/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-consensus-0.15.11/src/transaction/envelope.rs:187:5
    |
187 |     Legacy(Signed<TxLegacy>),
    |     ^^^^^^

error[E0308]: mismatched types
   --> crates/neura/neura-payload-builder/src/lib.rs:119:85
    |
119 |                       RethTransactionEnum::Eip2930(tx) => EthereumTxEnvelope::Eip2930(TxEip2930 {
    |  _________________________________________________________---------------------------_^
    | |                                                         |
    | |                                                         arguments to this enum variant are incorrect
120 | |                         chain_id: tx.chain_id,
121 | |                         nonce: tx.nonce,
122 | |                         gas_price: tx.gas_price,
...   |
127 | |                         access_list: convert_reth_access_list(Some(&tx.access_list)).unwrap_or_default(),
128 | |                     }),
    | |_____________________^ expected `Signed<TxEip2930>`, found `TxEip2930`
    |
    = note: expected struct `alloy_consensus::Signed<TxEip2930>`
               found struct `TxEip2930`
note: tuple variant defined here
   --> /home/peastew/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-consensus-0.15.11/src/transaction/envelope.rs:189:5
    |
189 |     Eip2930(Signed<TxEip2930>),
    |     ^^^^^^^

error[E0308]: mismatched types
   --> crates/neura/neura-payload-builder/src/lib.rs:129:85
    |
129 |                       RethTransactionEnum::Eip1559(tx) => EthereumTxEnvelope::Eip1559(TxEip1559 {
    |  _________________________________________________________---------------------------_^
    | |                                                         |
    | |                                                         arguments to this enum variant are incorrect
130 | |                         chain_id: tx.chain_id,
131 | |                         nonce: tx.nonce,
132 | |                         max_priority_fee_per_gas: tx.max_priority_fee_per_gas,
...   |
138 | |                         access_list: convert_reth_access_list(Some(&tx.access_list)).unwrap_or_default(),
139 | |                     }),
    | |_____________________^ expected `Signed<TxEip1559>`, found `TxEip1559`
    |
    = note: expected struct `alloy_consensus::Signed<TxEip1559>`
               found struct `TxEip1559`
note: tuple variant defined here
   --> /home/peastew/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/alloy-consensus-0.15.11/src/transaction/envelope.rs:191:5
    |
191 |     Eip1559(Signed<TxEip1559>),
    |     ^^^^^^^

error[E0599]: no variant or associated item named `WithSidecar` found for enum `TxEip4844Variant` in the current scope
   --> crates/neura/neura-payload-builder/src/lib.rs:159:71
    |
159 |                         EthereumTxEnvelope::Eip4844(TxEip4844Variant::WithSidecar(eip4844_tx, alloy_sidecar))
    |                                                                       ^^^^^^^^^^^ variant or associated item not found in `TxEip4844Variant`

error[E0599]: the method `try_build` exists for struct `EthereumPayloadBuilder<Pool, Client, EvmConfig>`, but its trait bounds were not satisfied
   --> crates/neura/neura-payload-builder/src/lib.rs:264:34
    |
264 |           match self.inner_builder.try_build(inner_args) {
    |                                    ^^^^^^^^^ method cannot be called on `EthereumPayloadBuilder<Pool, Client, EvmConfig>` due to unsatisfied trait bounds
    |
   ::: /home/peastew/src/neura-reth/crates/ethereum/payload/src/lib.rs:53:1
    |
53  |   pub struct EthereumPayloadBuilder<Pool, Client, EvmConfig = EthEvmConfig> {
    |   ------------------------------------------------------------------------- doesn't satisfy `_: PayloadBuilder`
    |
   ::: /home/peastew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:240:1
    |
240 | / pub struct Arc<
241 | |     T: ?Sized,
242 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
243 | | > {
    | |_- doesn't satisfy `<_ as PoolTransaction>::Consensus = EthereumTxEnvelope<TxEip4844>` or `_: PoolTransaction`
    |
    = note: the following trait bounds were not satisfied:
            `<Arc<ValidPoolTransaction<EthereumTxEnvelope<alloy_consensus::TxEip4844>>> as PoolTransaction>::Consensus = EthereumTxEnvelope<alloy_consensus::TxEip4844>`
            which is required by `EthereumPayloadBuilder<Pool, Client, EvmConfig>: PayloadBuilder`
            `Arc<ValidPoolTransaction<EthereumTxEnvelope<alloy_consensus::TxEip4844>>>: PoolTransaction`
            which is required by `EthereumPayloadBuilder<Pool, Client, EvmConfig>: PayloadBuilder`

error[E0164]: expected tuple struct or tuple variant, found struct variant `reth_basic_payload_builder::BuildOutcome::Better`
   --> crates/neura/neura-payload-builder/src/lib.rs:265:16
    |
265 |             Ok(reth_basic_payload_builder::BuildOutcome::Better(inner_payload_struct)) => {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant
    |
help: the struct variant's fields are being ignored
    |
265 -             Ok(reth_basic_payload_builder::BuildOutcome::Better(inner_payload_struct)) => {
265 +             Ok(reth_basic_payload_builder::BuildOutcome::Better { payload: _, cached_reads: _ }) => {
    |

error[E0164]: expected tuple struct or tuple variant, found struct variant `reth_basic_payload_builder::BuildOutcome::Aborted`
   --> crates/neura/neura-payload-builder/src/lib.rs:278:16
    |
278 |             Ok(reth_basic_payload_builder::BuildOutcome::Aborted(inner_payload_struct)) => {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant
    |
help: the struct variant's fields are being ignored
    |
278 -             Ok(reth_basic_payload_builder::BuildOutcome::Aborted(inner_payload_struct)) => {
278 +             Ok(reth_basic_payload_builder::BuildOutcome::Aborted { fees: _, cached_reads: _ }) => {
    |

error[E0533]: expected value, found struct variant `reth_basic_payload_builder::BuildOutcome::Better`
   --> crates/neura/neura-payload-builder/src/lib.rs:276:20
    |
276 |                 Ok(reth_basic_payload_builder::BuildOutcome::Better(neura_payload_data))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
276 -                 Ok(reth_basic_payload_builder::BuildOutcome::Better(neura_payload_data))
276 +                 Ok(reth_basic_payload_builder::BuildOutcome::Better { payload: /* value */, cached_reads: /* value */ })
    |

error[E0533]: expected value, found struct variant `reth_basic_payload_builder::BuildOutcome::Aborted`
   --> crates/neura/neura-payload-builder/src/lib.rs:289:20
    |
289 |                 Ok(reth_basic_payload_builder::BuildOutcome::Aborted(neura_payload_data))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
289 -                 Ok(reth_basic_payload_builder::BuildOutcome::Aborted(neura_payload_data))
289 +                 Ok(reth_basic_payload_builder::BuildOutcome::Aborted { fees: /* value */, cached_reads: /* value */ })
    |

error[E0599]: the method `on_missing_payload` exists for struct `EthereumPayloadBuilder<Pool, Client, EvmConfig>`, but its trait bounds were not satisfied
   --> crates/neura/neura-payload-builder/src/lib.rs:311:34
    |
311 |           match self.inner_builder.on_missing_payload(inner_args) {
    |                                    ^^^^^^^^^^^^^^^^^^ method cannot be called on `EthereumPayloadBuilder<Pool, Client, EvmConfig>` due to unsatisfied trait bounds
    |
   ::: /home/peastew/src/neura-reth/crates/ethereum/payload/src/lib.rs:53:1
    |
53  |   pub struct EthereumPayloadBuilder<Pool, Client, EvmConfig = EthEvmConfig> {
    |   ------------------------------------------------------------------------- doesn't satisfy `_: PayloadBuilder`
    |
   ::: /home/peastew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:240:1
    |
240 | / pub struct Arc<
241 | |     T: ?Sized,
242 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
243 | | > {
    | |_- doesn't satisfy `<_ as PoolTransaction>::Consensus = EthereumTxEnvelope<TxEip4844>` or `_: PoolTransaction`
    |
    = note: the following trait bounds were not satisfied:
            `<Arc<ValidPoolTransaction<EthereumTxEnvelope<alloy_consensus::TxEip4844>>> as PoolTransaction>::Consensus = EthereumTxEnvelope<alloy_consensus::TxEip4844>`
            which is required by `EthereumPayloadBuilder<Pool, Client, EvmConfig>: PayloadBuilder`
            `Arc<ValidPoolTransaction<EthereumTxEnvelope<alloy_consensus::TxEip4844>>>: PoolTransaction`
            which is required by `EthereumPayloadBuilder<Pool, Client, EvmConfig>: PayloadBuilder`

error[E0599]: no variant or associated item named `BuildBest` found for enum `MissingPayloadBehaviour` in the current scope
   --> crates/neura/neura-payload-builder/src/lib.rs:314:66
    |
314 |             reth_basic_payload_builder::MissingPayloadBehaviour::BuildBest(eth_payload_arc) => { // This is Arc<EthBuiltPayload>
    |                                                                  ^^^^^^^^^ variant or associated item not found in `MissingPayloadBehaviour<_>`

error[E0599]: no variant or associated item named `BuildBest` found for enum `MissingPayloadBehaviour` in the current scope
   --> crates/neura/neura-payload-builder/src/lib.rs:317:71
    |
317 |                  reth_basic_payload_builder::MissingPayloadBehaviour::BuildBest(Arc::new(neura_payload)) // Expects Arc<P>
    |                                                                       ^^^^^^^^^ variant or associated item not found in `MissingPayloadBehaviour<_>`

error[E0599]: the method `build_empty_payload` exists for struct `EthereumPayloadBuilder<Pool, Client, EvmConfig>`, but its trait bounds were not satisfied
   --> crates/neura/neura-payload-builder/src/lib.rs:326:34
    |
326 |           match self.inner_builder.build_empty_payload(config) {
    |                                    ^^^^^^^^^^^^^^^^^^^ method cannot be called on `EthereumPayloadBuilder<Pool, Client, EvmConfig>` due to unsatisfied trait bounds
    |
   ::: /home/peastew/src/neura-reth/crates/ethereum/payload/src/lib.rs:53:1
    |
53  |   pub struct EthereumPayloadBuilder<Pool, Client, EvmConfig = EthEvmConfig> {
    |   ------------------------------------------------------------------------- doesn't satisfy `_: PayloadBuilder`
    |
   ::: /home/peastew/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/sync.rs:240:1
    |
240 | / pub struct Arc<
241 | |     T: ?Sized,
242 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
243 | | > {
    | |_- doesn't satisfy `<_ as PoolTransaction>::Consensus = EthereumTxEnvelope<TxEip4844>` or `_: PoolTransaction`
    |
    = note: the following trait bounds were not satisfied:
            `<Arc<ValidPoolTransaction<EthereumTxEnvelope<alloy_consensus::TxEip4844>>> as PoolTransaction>::Consensus = EthereumTxEnvelope<alloy_consensus::TxEip4844>`
            which is required by `EthereumPayloadBuilder<Pool, Client, EvmConfig>: PayloadBuilder`
            `Arc<ValidPoolTransaction<EthereumTxEnvelope<alloy_consensus::TxEip4844>>>: PoolTransaction`
            which is required by `EthereumPayloadBuilder<Pool, Client, EvmConfig>: PayloadBuilder`

error[E0614]: type `EthBuiltPayload` cannot be dereferenced
   --> crates/neura/neura-payload-builder/src/lib.rs:329:54
    |
329 |                 Ok(NeuraBuiltPayloadWithDetails::new((*eth_payload_arc).clone(), full_transactions))
    |                                                      ^^^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `reth_primitives`
  --> crates/neura/neura-payload-builder/src/lib.rs:87:70
   |
87 |                 let convert_reth_access_list = |reth_al_opt: Option<&reth_primitives::AccessList>| -> Option<AlloyConsensusAccessList> {
   |                                                                      ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `reth_primitives`
   |
help: a struct with a similar name exists
   |
87 -                 let convert_reth_access_list = |reth_al_opt: Option<&reth_primitives::AccessList>| -> Option<AlloyConsensusAccessList> {
87 +                 let convert_reth_access_list = |reth_al_opt: Option<&EthPrimitives::AccessList>| -> Option<AlloyConsensusAccessList> {
   |
help: there is a crate or module with a similar name
   |
87 -                 let convert_reth_access_list = |reth_al_opt: Option<&reth_primitives::AccessList>| -> Option<AlloyConsensusAccessList> {
87 +                 let convert_reth_access_list = |reth_al_opt: Option<&alloy_primitives::AccessList>| -> Option<AlloyConsensusAccessList> {
   |

Some errors have detailed explanations: E0164, E0277, E0308, E0432, E0433, E0533, E0599, E0609, E0614...
For more information about an error, try `rustc --explain E0164`.
warning: `neura-payload-builder` (lib test) generated 8 warnings
error: could not compile `neura-payload-builder` (lib test) due to 29 previous errors; 8 warnings emitted
